### Aliases ###
# General aliases (can be shared).

function al(){ alias | grep "^$1" }               # list aliases starting with the input


## Files ##

# [To]uch
alias to='touch'
alias toal='touch ~/.aliases'

# [So]urce
alias so='source'
alias sobrc='source ~/.bashrc'
alias sozrc='source ~/.zshrc'

# [Vi]m
alias vi='vim'
alias vial='vim ~/.aliases'
alias vibrc='vim ~/.bashrc'
alias virq='vim ./requirements.txt'
alias virqd='vim ./requirements-dev.txt'
alias vissh='vim ~/.ssh/config'
alias vizrc='vim ~/.zshrc'

# [At]tom
alias at='atom'
alias atal='atom ~/.aliases'
alias atbrc='atom ~/.bashrc'
alias atssh='atom ~/.ssh/config'
alias atzrc='atom ~/.zshrc'


## Navigation ##

# [L]i[s]t
alias lsa='ls -A'                                 # [a]ll files (except '.' and '..')
alias lsr='ls -R'                                 # [r]ecursively

# [R]e[m]ove
alias rmd='rm -d'                                 # [d]irectories (must be empty)
alias rmf='rm -f'                                 # [f]orce (no confirmation needed)
alias rmr='rm -r'                                 # [r]ecursively (deal with non-empty directories)
alias rmrf='rm -fr'                               # [r]ecursively [f]orce

# [D]isplay [u]sage
alias du='du -h'                                  # human readable
alias dud='du -h -d 1'                            # with [d]epth 1

# [M]a[k]e [dir]ectory
alias mkdirr='mkdir -p'                           # create [r]ecursively

# E[x]i[t]
alias xt='exit'


## Code environments ##

# [B]rew
alias b='brew'
alias bcu='brew cleanup'
alias bcus='brew cleanup -s'  # [s]crub the cache (remove download of even latest versions)
alias bi='brew install'
alias bic='brew install --cask'
alias bl='brew list'
alias blc='brew list --cask'
alias bud='brew update'
alias budf='
  echo "brew update..."; brew update;
  echo "brew upgrade..."; brew upgrade;
  echo "brew upgrade (casks)..."; brew upgrade homebrew/cask/docker; brew upgrade $(brew outdated --cask --greedy --quiet);
  echo "brew cleanup..."; brew cleanup;
  echo "brew cleanup -s..."; brew cleanup -s;
'
alias bug='brew upgrade'
alias bugc='brew upgrade $(brew outdated --cask --greedy --quiet)'  # update all outdated casks
alias bui='brew uninstall'
alias buic='brew uninstall --cask'

# [C]onda
alias c='conda'
alias ca='conda activate'
alias cab='conda activate base'
alias ccl='conda clean --all'
alias cco='conda config'
alias ccr='conda create --name'                   # [cr]eate an environment
alias ci='conda install'
alias cl='conda list'                             # [l]ist packages
alias cle='conda env list'                        # [l]ist [e]nvironments
alias crm='conda remove'                          # [r]e[m]ove a package
alias crme='conda remove --all --name'            # [r]e[m]ove an environment
alias cud='conda update'
alias cuda='conda update --all'                   # [u]p[d]ate [a]ll the packages of an environment

# [Pi]p
alias pi='pip'
alias pii='pip install'
alias piie='pip install -e'
alias piieh='pip install -e .'
alias pil='pip list'
alias pis='pip show'
alias piui='pip uninstall'
alias piuif='pip uninstall -y'

# [Po]etry
alias po='poetry'
alias poa='poetry add'
alias poad='poetry add --dev'
alias poccl='poetry cache clear --all .'
alias poe='poetry env'
alias poeif='poetry env info'
alias poels='poetry env list'
alias poerm='poetry env remove'
alias poeus='poetry env use'
alias poeus38='poetry env use python3.8'
alias poi='poetry install'
alias poini='poetry init'
alias porm='poetry remove'
alias poru='poetry run'
alias porupte='poetry run pytest'
alias poruptec='poetry run pytest --cov=.; poetry run coverage erase'
alias poruptes='poetry run pytest --show-capture=no'
alias poruptev='poetry run pytest -vvv'
alias poud='poetry update'

# [ve]nv
function vea(){ source "$1/bin/activate" }        # [a]ctivate an environemnt
alias ved='deactivate'                            # [d]eactivate an environment


## Code ##

# [G]it
alias g='git'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'                             # list local [b]ranches
alias gba='git branch -a'                         # list [a]ll [b]ranches
alias gbd='git branch -D'                         # force [d]elete local [b]ranch
alias gbrt='git branch -r'                        # list [r]emo[t]e [b]ranches
alias gch='git checkout'
alias gchb='git checkout -b'                      # checkout without discarding local changes
alias gchd='git checkout --'                      # discard local changes for the given file(s)
alias gchm='git checkout main'                    # [ch]eckout to the [m]ain branch
alias gchms='git checkout master'                 # [ch]eckout to the [m]a[s]ter branch
alias gcl='git clone'
alias gcm='git commit -m'
function gcmbug(){ git commit -m ":bug: $1" }
function gcmcomm(){ git commit -m ":bulb: $1" }
function gcmconf(){ git commit -m ":wrench: $1" }
function gcmdel(){ git commit -m ":fire: $1" }
function gcmdoc(){ git commit -m ":memo: $1" }
function gcmfeat(){ git commit -m ":sparkles: $1" }
function gcmfix(){ git commit -m ":adhesive_bandage: $1" }
function gcmfrmt(){ git commit -m ":art: $1" }
function gcmhtfx(){ git commit -m ":ambulance: $1" }
function gcmignr(){ git commit -m ":see_no_evil: $1" }
function gcmmove(){ git commit -m ":truck: $1" }
function gcmmrg(){ git commit -m ":twisted_rightwards_arrows: $1" }
function gcmrfct(){ git commit -m ":recycle: $1" }
function gcmtest(){ git commit -m ":white_check_mark: $1" }
function gcmtype(){ git commit -m ":label: $1" }
function gcmtypo(){ git commit -m ":pencil2: $1" }
function gcmwip(){ git commit -m ":construction: $1" }
alias gco='git config'
alias gf='git fetch'
alias gfo='git fetch origin'
alias gfp='git fetch --prune'                     # remove unused remote branches
alias gh='git help'
alias gl='git log'
alias gm='git merge'
alias gmm='git merge main'
alias gpl='git pull'
alias gps='git push'
alias gpst='git push --tags'                      # [p]u[s]h all [t]ags
alias gpstd='git push --delete origin'            # [p]u[s]h [t]ags [d]eletion
alias gs='git status'
alias gst='git stash'
alias gsta='git stash apply'
alias gstclr='git stash clear'
alias gstls='git stash list'
alias grb='git rebase'
alias grs='git reset'
alias grsha='git reset --hard'
alias grshe='git reset HEAD'
alias grsso='git reset --soft'
alias grv='git revert'
alias gt='git tag'
alias gtd='git tag -d'                            # [d]elete local [t]ag

# [P]re-[c]o[m]mit
alias pcm='pre-commit'
alias pcmi='pre-commit install'                   # [i]nstall in a repository
alias pcmru='pre-commit run'                       # [r]un on a file
alias pcmrua='pre-commit run --all-files'          # [r]un on [a]ll files
alias pcmui='pre-commit uninstall'                # [u]ninstall from a repository

# Formatting
alias prt='prettier'
alias prtc='prettier --check'
alias prtw='prettier --write'
alias blk='black'                                 # [Bl]ac[k] re-format
alias iso='isort'                                 # [iso]rt re-format
alias flk='flake8'                                # [Fl]a[k]e8 re-format

# Testing
alias pte='pytest'                                # run [p]y[te]st
alias ptef='rm -r .pytest_cache; pytest'          # [f]orce a fresh installation and run [p]y[te]st

# [Sc]reen
alias scd='screen -d'                             # force detach a session
alias scl='screen -ls'                            # list current sessions
alias scr='screen -r'                             # resume/attach a session
alias scs='screen -S'                             # create a session by name
alias scx='screen -x'                             # share a screen session

# [D]oc[k]er
alias d='docker'
alias db='docker build'
alias dcm='docker-compose'
alias dcmd='docker-compose down'
alias dcmu='docker-compose up'
alias dcmub='docker-compose up --build'
alias dcn='docker container'
alias dcnls='docker container ls'
alias dcnlsa='docker container ls -a'
alias dcnrm='docker container rm'
alias dli='docker login'
alias dlo='docker logout'
alias dps='docker push'
alias dpl='docker pull'
alias dru='docker run'
alias dst='docker stop'
alias dsyp='docker system prune'


## Distant server ##

function bind(){ ssh -N -f -L localhost:$2:localhost:$3 $1 }
function copy-to(){ rsync -r $2 $1:$3 }       # $1: user@host; $2: local path; $3: remote path
function copy-from(){ rsync -r $1:$2 $3 }     # $1: user@host; $2: remote path; $3: local path


## Applications ##

alias chrm='open -a "Google Chrome"'



## Navigation ##

alias desk='cd ~/Desktop/; ls'
alias docs='cd ~/Documents/; ls'
alias rkn='cd ~/Desktop/arkhn; ls'
alias pypa='cd ~/Desktop/arkhn/pypa; ls'


## Templates ##

alias platex='cd ~/Documents/code/platex'
alias plathon='cd ~/Documents/code/plathon'
alias plathon-import='
  cp ~/Documents/code/plathon/.gitignore .;
  cp ~/Documents/code/plathon/.pre-commit-config.yaml .;
  cp ~/Documents/code/plathon/LICENSE .;
  cp ~/Documents/code/plathon/pyproject.toml .;
  cp ~/Documents/code/plathon/requirements-dev.txt .;
  cp ~/Documents/code/plathon/setup.cfg .;
  cp ~/Documents/code/plathon/.github/workflows/lint.yml .github/workflows;
  cp ~/Documents/code/plathon/.github/workflows/test.yml .github/workflows;
  cp -n ~/Documents/code/plathon/MANIFEST.in .;
  cp -n ~/Documents/code/plathon/README.md .;
  cp -n ~/Documents/code/plathon/setup.py .;
  cp -n ~/Documents/code/plathon/requirements.txt .;
'


## Distant server ##

alias bind-pypa-dev='ssh -N -f -L localhost:8000:localhost:8000 root@163.172.137.151'
alias bind-pypa-staging='ssh -N -f -L localhost:9000:localhost:9000 root@163.172.137.151'
function copy-to-pypa(){ rsync -r $1 root@163.172.137.151:$2 }  # $1: local path; $2: remote path
alias copy-to-pypa-al='rsync -r ~/.aliases root@163.172.137.151:.'
function copy-from-pypa(){ rsync -r root@163.172.137.151:$1 $2 }  # $1: remote path; $2: local path
